import streamlit as st
import pandas as pd
import json
from langchain_community.vectorstores import FAISS
from langchain_community.embeddings import HuggingFaceEmbeddings
import base64
import requests
# C·∫•u h√¨nh trang
st.set_page_config(page_title="Tr·ª£ l√Ω AI H√°n‚ÄìVi·ªát", layout="centered", page_icon="üìò")

# CSS giao di·ªán dark mode + chat
st.markdown("""
    <style>
        body {
            background-color: #0f1117;
            color: #f0f0f0;
        }
        .main-title {
            text-align: center;
            font-size: 36px;
            color: #00c6ff;
            margin-bottom: 20px;
        }
        .response-box {
            background-color: #1c1f26;
            border-left: 5px solid #00c6ff;
            padding: 20px;
            border-radius: 10px;
            margin-top: 20px;
            font-size: 16px;
            color: #f0f0f0;
        }
        .chat-bubble {
            background-color: #1c1f26;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 10px;
            font-size: 16px;
            border-left: 4px solid #00c6ff;
        }
        .footer {
            text-align: center;
            font-size: 12px;
            color: #888;
            margin-top: 40px;
        }
        .stTextInput > div > input {
            background-color: #1c1f26;
            color: #f0f0f0;
            border: 1px solid #444;
        }
        .history-item {
            background-color: #1c1f26;
            padding: 8px;
            border-radius: 6px;
            margin-bottom: 5px;
            color: #00c6ff;
            cursor: pointer;
        }
        .speak-button {
            background-color: #00c6ff;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 6px;
            font-size: 14px;
            margin-top: 10px;
        }
    </style>
""", unsafe_allow_html=True)

# Ti√™u ƒë·ªÅ
st.markdown("<div class='main-title'>Tr·ª£ l√Ω AI H√°n‚ÄìVi·ªát</div>", unsafe_allow_html=True)

# T·∫£i d·ªØ li·ªáu
@st.cache_resource
def load_data():
    df = pd.read_excel("ngu_lieu_nckh.xlsx")
    docs = []
    for _, row in df.iterrows():
        parts = [f"{col}: {row[col]}" for col in df.columns if pd.notna(row[col])]
        docs.append(" | ".join(parts))
    embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")
    db = FAISS.from_texts(docs, embeddings)
    return db, docs

db, documents = load_data()

# G·ªçi Gemini
def generate_answer(context, query):
    url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=AIzaSyAFZMhrgHbzztNuxTYbaxBUGantk8dq-eQ"
    headers = {'Content-Type': 'application/json'}
    prompt = f"""
B·∫°n l√† tr·ª£ l√Ω H√°n‚ÄìVi·ªát. D·ª±a tr√™n d·ªØ li·ªáu sau, h√£y gi·∫£i th√≠ch r√µ r√†ng, t·ª± nhi√™n:

[D·ªÆ LI·ªÜU]:
{context}

[C√ÇU H·ªéI]:
{query}

Tr·∫£ l·ªùi theo c·∫•u tr√∫c:
‚Ä¢ M·∫∑t ch·ªØ
‚Ä¢ Nghƒ©a ti·∫øng Trung
‚Ä¢ T·ª´ lo·∫°i
‚Ä¢ Ng·ªØ c·∫£nh
‚Ä¢ T·ª´ H√°n Vi·ªát
‚Ä¢ Nghƒ©a ti·∫øng Vi·ªát hi·ªán ƒë·∫°i
‚Ä¢ T·ª´ lo·∫°i ti·∫øng Vi·ªát
‚Ä¢ Ng·ªØ c·∫£nh ti·∫øng Vi·ªát
‚Ä¢ Ghi ch√∫

K·∫øt th√∫c b·∫±ng m·ªôt c√¢u tr√≤ chuy·ªán nh·∫π nh√†ng.
"""
    data = {"contents": [{"parts": [{"text": prompt}]}]}
    res = requests.post(url, headers=headers, data=json.dumps(data))
    return res.json()['candidates'][0]['content']['parts'][0]['text']

# Ph√°t √¢m (gi·∫£ l·∫≠p b·∫±ng Google Translate)
def speak(text):
    # T·∫°o URL TTS
    url = f"https://translate.google.com/translate_tts?ie=UTF-8&q={text}&tl=vi&client=tw-ob"

    # T·∫£i d·ªØ li·ªáu √¢m thanh
    response = requests.get(url)
    if response.status_code == 200:
        b64 = base64.b64encode(response.content).decode()
        audio_html = f"""
        <audio autoplay>
            <source src="data:audio/mp3;base64,{b64}" type="audio/mp3">
        </audio>
        """
        st.components.v1.html(audio_html, height=0)
    else:
        st.warning("Kh√¥ng th·ªÉ ph√°t √¢m t·ª´ n√†y.")


# Nh·∫≠p li·ªáu
query = st.text_input(
    "Nh·∫≠p t·ª´ c·∫ßn tra ho·∫∑c tr√≤ chuy·ªán...",
    value=st.session_state.get("query_reload", ""),
    key="main_input"
)

# Kh·ªüi t·∫°o l·ªãch s·ª≠ n·∫øu ch∆∞a c√≥
if "history" not in st.session_state:
    st.session_state.history = []

# X·ª≠ l√Ω truy v·∫•n
if db and documents and query:
    with st.spinner("üîç ƒêang tra c·ª©u..."):
        context = None

        # T√¨m kh·ªõp ch√≠nh x√°c
        for doc in documents:
            if query.lower() in doc.lower():
                context = doc
                break

        # N·∫øu kh√¥ng c√≥ kh·ªõp ch√≠nh x√°c, t√¨m t∆∞∆°ng ƒë·ªìng
        if not context:
            results = db.similarity_search(query, k=3)
            relevant = [r.page_content for r in results if query.lower() in r.page_content.lower()]
            if relevant:
                context = "\n\n".join(relevant)

        # Ki·ªÉm tra v√† ph·∫£n h·ªìi
        if context:
            answer = generate_answer(context, query)
            if query not in st.session_state.history:
                st.session_state.history.append(query)
        else:
            answer = "‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ph√π h·ª£p trong ng·ªØ li·ªáu. Vui l√≤ng th·ª≠ t·ª´ kh√°c ho·∫∑c ki·ªÉm tra ch√≠nh t·∫£."

        # Hi·ªÉn th·ªã nh∆∞ chat
        st.markdown(f"<div class='chat-bubble'>{answer}</div>", unsafe_allow_html=True)

        # N√∫t ph√°t √¢m (ch·ªâ khi c√≥ k·∫øt qu·∫£ h·ª£p l·ªá)
        if "‚ùå" not in answer and st.button("üîä Ph√°t √¢m t·ª´", key="speak_button"):
            speak(query)

# Hi·ªÉn th·ªã l·ªãch s·ª≠ tra c·ª©u (d√πng ch·ªâ s·ªë ƒë·ªÉ tr√°nh tr√πng key)
if st.session_state.history:
    st.markdown("### üìú L·ªãch s·ª≠ tra c·ª©u")
    for i, item in enumerate(st.session_state.history[::-1]):
        if st.button(item, key=f"history_{i}"):
            st.session_state.query_reload = item


# Footer
st.markdown("<div class='footer'>¬© 2025 NCKH - ChineseCoach</div>", unsafe_allow_html=True)
